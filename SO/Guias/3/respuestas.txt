1.
a. NO, si tienen mem comaprtida y corrió el A solamente imprime X+1, si ente el x+1 y prinnt corrió el B, imprime 2
b. De 
x de 1 a 4 en todos los casos
    Y se imprime "a" si se ejecuta y==1 entre que se hace la asignacion y = 1 y se la reasigna y=0

2. Sí puede pasar que en los ifs, en un caso esté en 4, haya entrado a x++ y antes de eso llega otro que, como no se sumó
todavía, también entra a x++, entonces pasaría directamente a 6 cuando en 5 ya debería haberse restado.

3. raro. Fairness? No debería creo porque 
**?????**

4.
Si no fuesen atómicas dos programas podrían entrar al mismo tiempo y como ambas ven que está en 1, lo ponen en 0 y entran
es decir que no tie exclusividad ya que apenas una entra debería inhabilitar a todas las otras.

5. Porque la barrera solo se abre para una persona. y nunca llegan a critica() los demás
Solo hace falta agregar otra barrera.signal()? Luego del wait()
EL ultimo también lo hace? A dónde va el signal?

Puedo hacer MEJOR:
barrera.signal(unsigned int n):
    for(i = 0; i < n; i++):
        barrera.signal()

-----------6.-----------
-El primer debería
-El de barrera, hace la cantidad de señales necesarias simplemente.
***PREGUNTAR***

-----------7.-----------

int N = cant_procesos
sem_procesar[sem(0), ..... sem(0)]  empiezan todos en 0
int K = proceso_inicio

proceso(i){

    if(i == k){
        sem_procesar[i].signal()
    }

    sem_procesar[i].wait()
    procesar()

    if(i != k-1){
        sem_procesar[(i+1)%n].signal()
    }

}

-----------8.-----------

---a---
enum [ABC]
sems[sem(0), sem(0), sem(0)]  empiezan todos en 0

while(true){

    letra(i){
        if(i==A){
            sems[i].signal();
        }

        sems[i].wait()

        procesar()
        sems[(i+1)%3].signal();             //%3 pa cuando se pase, N sería en general
    }
}

---b---

enum [ABC]
sems[sem(0), sem(0), sem(0)]  empiezan todos en 0

int contador = 2

while(true){

    letra(i){
        if(i==B){
            sems[i].signal();
            if (contador == 0){
                sems[(i-1)%3].signal();     //%3 pa cuando de negativo

                sems[i].wait()
                contador = 3
            }
            contador--;
        }
        sems[i].wait()
        procesar()

        sems[(i-1)%3].wait()
    }
}

---c---
int retiradas = 2
mutex = sem(1)
sem_cons = sem(0)
sem_prod = sem(1)

prod(){

    sem_prod.wait()
    produce()
    sem_cons.signal()
}

cons{
    sem_cons.wait();

    mutex.wait()
    if(retiradas == 0){
        sem_prod.signal()
    }
    retiradas--;
    mutex.signal()

    consumir(); 
}


---d---


enum B,C
int sigo_b = 2

sem_cons_1 = sem(0)
sem_cons_2 = sem(0)

while(true)
prod(){
    sigo_b = 2;
    sem_prod.wait()
    produce()
    sem_cons_1.signal()

    sem_prod.wait()
    produce()
    sem_cons_2.signal()
}

while(true)
cons(i){
    if(i == 0)
        sem_cons_1.wait();
        if (sigo_b == 0){
            sem_prod.signal();
            sem_cons_1.wait();
            sigo_b--;
        }
        consumir();
        sem_cons_1.signal();

    }else{
        sem_cons_2.wait();
        consumir();
        sem_prod.signal();            
}

-----------13.-----------
mutex_1 = sem(0)

array mesa = [0,....,0]
sem_entrando = sem(0)

sem_dejar entrar=sem(1)

//Cómo doy prioridad a las que ya tienen a alguien, array y que se de señal a si mismo


mesa(i){
    sem_dejar_entrar.wait()

    if(mesas_llenas==N){
        sem_mesa_llena.wait()
    }

    dejar_entrar()
    
    MUTEX.signal
    mesa[i]++
    if(mesa[i] == 4){
        mesas_llenas++
        jugar()
        mesa[i] = 0
        sem_mesa_llena.signal()
    }else{
        sem_dejar_entrar.signal()   //como hago para llenar el que empezó? arrays
    }
    MUTEX.wait
}

13. de vuelta

    cliente()



-----------14.-----------
-----------16.-----------
-----------18.-----------
-----------20.-----------